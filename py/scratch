            c1 = cc1[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize] 
            c3 = cc3[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize]

            if imnum < 100:
                oname = "../images/H00790{}_{}_{}.JPG".format(imnum,i,j) 
            else:
                oname = "../images/H0079{}_{}_{}.JPG".format(imnum,i,j) 
            retval=cv2.imwrite(oname,c1)
            print "Wrote ", oname, retval

            if imnum < 100:
                oname = "../images/V00790{}_{}_{}.JPG".format(imnum,i,j) 
            else:
                oname = "../images/V0079{}_{}_{}.JPG".format(imnum,i,j) 
            retval=cv2.imwrite(oname,c3)
            print "Wrote ", oname, retval

            #bilat, sigC, sigD = bilat_adjust(c1)
            n=5
            sigC=180
            sigD=1
            test = channelops(c1, n, sigC, sigD)
            n=5
            sigC=300
            sigD=3
            test = np.hstack((test,channelops(c3, n, sigC, sigD)))
            rows, cols = c1.shape
            criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
            
            em = cv2.EM(5,cv2.EM_COV_MAT_DIAGONAL)
            ret, ll, result, probs = em.train(test)
            segment=labels_to_rgb(result,rows,cols)
            print "EM segment ", imname
            if imnum < 100:
                oname = "../images/EM00790{}_{}_{}.JPG".format(imnum,i,j) 
            else:
                oname = "../images/EM0079{}_{}_{}.JPG".format(imnum,i,j) 
            cv2.imwrite(oname,segment)
            print "Wrote ", oname
                
            ret, result, centers = cv2.kmeans(test, 5, criteria, 1, cv2.KMEANS_RANDOM_CENTERS)
            segment=labels_to_rgb(result,rows,cols)
            print "K-means segment ", imname
            if imnum < 100:
                oname = "../images/K00790{}_{}_{}.JPG".format(imnum,i,j) 
            else:
                oname = "../images/K0079{}_{}_{}.JPG".format(imnum,i,j) 
            cv2.imwrite(oname,segment)
            print "Wrote ", oname
         
            #edges=canny_contours(c3, n)
            #binary = rgb_to_binary_2(segment)
            #opening, no = opening_adjust(np.uint8(binary*255))
                    
