##    
##    yrows, xcols = gray.shape
##    xsize = 1000
##    ysize = 750 
##    print yrows, xcols
##    I = xcols/xsize
##    J = yrows/ysize
##    for i in range(0,I,1):
##        for j in range(0,J,1): 
##            img_ij = img[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize,:]
##            h_ij = h[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize]
##            gray_ij = gray[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize]
##            h_eq = cv2.equalizeHist(h_ij)
##            testwrite(gray_ij, "G", imnum, i, j)
##            testwrite(h_eq, "HQ", imnum, i, j)
##            surf=cv2.SURF(8000)
##            kp, des = surf.detectAndCompute(h_eq,None)
##            surf_ij = cv2.drawKeypoints(h_eq,kp,None,(255,0,0),4)
##            testwrite(surf_ij, "S", imnum, i, j)
##            sdn = localSD(gray_ij, 101)
##            testwrite(sdn, "SDN", imnum, i, j)
##            
##            h_ij = None
##            img_ij = None
##            gray_ij = None
##            kp = None
##            des = None

    yrows, xcols = gray.shape
    xsize = 300
    ysize = 250 
    print yrows, xcols
    I = xcols/xsize
    J = yrows/ysize
    for i in range(0,I,1):
        for j in range(0,J,1): 
            img_ij = img[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize,:]
            h_ij = h[j*(ysize-1):j*(ysize-1)+ysize,i*(xsize-1):i*(xsize-1)+xsize]
            h_eq = cv2.equalizeHist(h_ij)
            ret1,th1 = cv2.threshold(h_eq,127,255,cv2.THRESH_BINARY)
            ret2,thresh = cv2.threshold(h_eq,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
            #testwrite(img_ij, "G", imnum, i, j)
            #testwrite(h_eq, "HQ", imnum, i, j)
            testwrite(thresh, "AT", imnum, i, j)

            h_ij = None
            img_ij = None


    mask = np.zeros(Img.shape[:2],np.uint8)

    bgdModel = np.zeros((1,65),np.float64)
    fgdModel = np.zeros((1,65),np.float64)

    cv2.grabCut(Img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)

    mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
    Img = Img*mask2[:,:,np.newaxis]

    cv2.namedWindow('image{}'.format(imnum),cv2.WINDOW_NORMAL)
    cv2.imshow('image{}'.format(imnum),Img)
    testwrite(Img, "GC", imnum, None, None) 
    cv2.waitKey(20)
    cv2.destroyAllWindows()        
